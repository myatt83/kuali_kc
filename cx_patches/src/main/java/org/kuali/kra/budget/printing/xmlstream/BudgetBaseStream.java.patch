diff --git a/src/main/java/org/kuali/kra/budget/printing/xmlstream/BudgetBaseStream.java b/src/main/java/org/kuali/kra/budget/printing/xmlstream/BudgetBaseStream.java
index 3ba4fa5..5380745 100644
--- a/src/main/java/org/kuali/kra/budget/printing/xmlstream/BudgetBaseStream.java
+++ b/src/main/java/org/kuali/kra/budget/printing/xmlstream/BudgetBaseStream.java
@@ -46,6 +46,7 @@ import java.lang.reflect.Method;
 import java.sql.Date;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
@@ -298,9 +299,9 @@ public abstract class BudgetBaseStream implements XmlStream {
 					Date endDate = budgetRateAndBase.getEndDate();
 					String key = new StringBuilder(startDate.toString())
 							.append(endDate.toString()).toString();
-					if (laRateBaseMap.containsKey(key)) {
-						continue;
-					}
+//					if (laRateBaseMap.containsKey(key)) {
+//						continue;
+//					}
 					calculatedCost = calculatedCost.add(budgetRateAndBase
 							.getCalculatedCost());
 					laRateBaseMap.put(key, budgetRateAndBase);
@@ -814,6 +815,7 @@ public abstract class BudgetBaseStream implements XmlStream {
 			calculatedCost = getCalculatedCostForBudgetExclusionsSortId4();
 			ReportType reportTypeForSortId4 = getReportTypeForExclusions(
 					sortId, categoryDesc, calculatedCost);
+			if(calculatedCost.doubleValue()>0.0d)
 			    reportTypeList.add(reportTypeForSortId4);
 		} else {
 			sortId = 1;
@@ -853,6 +855,7 @@ public abstract class BudgetBaseStream implements XmlStream {
 			calculatedCost = getCalculatedCostForBudgetExclusionsSortId4();
 			ReportType reportTypeForSortId4 = getReportTypeForExclusions(
 					sortId, categoryDesc, calculatedCost);
+	         if(calculatedCost.doubleValue()>0.0d)
 	             reportTypeList.add(reportTypeForSortId4);
 		}
 		subReportType.setGroupArray(getGroupsType(reportTypeList));
@@ -909,26 +912,27 @@ public abstract class BudgetBaseStream implements XmlStream {
 		Map<String, ReportTypeVO> reportTypeMap = new HashMap<String, ReportTypeVO>();
 		for (ReportTypeVO reportTypeVO : tempReportTypeVOList) {
 			String budgetOHExclusionKey = reportTypeVO.getCostElementDesc();
+            BudgetDecimal calculatedCost = reportTypeVO.getCalculatedCost();
 			if (reportTypeMap.containsKey(budgetOHExclusionKey)) {
-				continue;
-			}
-			BudgetDecimal calculatedCost = BudgetDecimal.ZERO;
-			for (ReportTypeVO reportTypeVO1 : tempReportTypeVOList) {
-				String budgetOHExclusionTempKey = reportTypeVO1
-						.getCostElementDesc();
-				if (budgetOHExclusionTempKey.equals(budgetOHExclusionKey)) {
-					calculatedCost = calculatedCost.add(reportTypeVO1
-							.getCalculatedCost());
+			    ReportTypeVO reportTypeVO1 = reportTypeMap.get(budgetOHExclusionKey);
+                calculatedCost = calculatedCost.add(reportTypeVO1.getCalculatedCost());
+                reportTypeVO1.setCalculatedCost(calculatedCost);
+			    reportTypeMap.put(budgetOHExclusionKey, reportTypeVO1);
+			}else{
+			    reportTypeMap.put(budgetOHExclusionKey, reportTypeVO);
 			}
 		}
-			reportTypeMap.put(budgetOHExclusionKey, reportTypeVO);
+		Iterator<String> it = reportTypeMap.keySet().iterator();
+		while (it.hasNext()) {
+            String budgetOHExclusionKey = (String) it.next();
+            ReportTypeVO reportTypeVO1 = reportTypeMap.get(budgetOHExclusionKey);
             ReportType reportType = ReportType.Factory.newInstance();
             reportType.setSortId(sortId);
-			reportType.setCostElementDescription(reportTypeVO
-					.getCostElementDesc());
-			reportType.setCalculatedCost(calculatedCost.doubleValue());
+            reportType.setCostElementDescription(budgetOHExclusionKey);
+            reportType.setCalculatedCost(reportTypeVO1.getCalculatedCost().doubleValue());
             reportTypeList.add(reportType);
         }
+
 	}
 
 	/**
@@ -1037,7 +1041,7 @@ public abstract class BudgetBaseStream implements XmlStream {
 					&& isLineItemCalAmountOfRateClassTypeOverhead(budgetLineItemCalcAmount)) {
 				if (budgetLineItemCalcAmount.getLineItemNumber().equals(
 						lineItemNumber)) {
-					availabe = true;
+					return true;
 				}
 			}
 		}
@@ -1634,10 +1638,10 @@ public abstract class BudgetBaseStream implements XmlStream {
 						&& rateClassType.equals(budgetPersRateAndBase
 								.getRateClass().getRateClassType())) {
 					String budgetPersRateBaseKey = getBudgetPersRateAndBaseKey(budgetPersRateAndBase);
-					if (otherBudgetPersRateBaseMap
-							.containsKey(budgetPersRateBaseKey)) {
-						continue;
-					}
+//					if (otherBudgetPersRateBaseMap
+//							.containsKey(budgetPersRateBaseKey)) {
+//						continue;
+//					}
 					ReportTypeVO reportTypeVO = getReportTypeVOForBudgetPersonnelRateAndBase(budgetPersRateAndBase);
 					reportTypeVO.setRateTypeDesc(getRateTypeDesc(
 							budgetPersRateAndBase.getRateClassCode(),
@@ -1675,10 +1679,10 @@ public abstract class BudgetBaseStream implements XmlStream {
 						&& budgetPersRateAndBase.getRateClass()
 								.getRateClassType().equals(rateClassType)) {
 					String budgetPersRateBaseKey = getBudgetPersRateAndBaseKey(budgetPersRateAndBase);
-					if (vacBudgetPersRateBaseMap
-							.containsKey(budgetPersRateBaseKey)) {
-						continue;
-					}
+//					if (vacBudgetPersRateBaseMap
+//							.containsKey(budgetPersRateBaseKey)) {
+//						continue;
+//					}
 					ReportTypeVO reportTypeVO = getReportTypeVOForBudgetPersonnelRateAndBase(budgetPersRateAndBase);
 					reportTypeVO.setRateTypeDesc(getRateTypeDesc(
 							budgetPersRateAndBase.getRateClassCode(),
@@ -1755,10 +1759,10 @@ public abstract class BudgetBaseStream implements XmlStream {
 						&& budgetPersRateAndBase.getRateClass()
 								.getRateClassType().equals(rateClassType)) {
 					String budgetPersRateBaseKey = getBudgetPersRateAndBaseKey(budgetPersRateAndBase);
-					if (ebBudgetPersRateBaseMap
-							.containsKey(budgetPersRateBaseKey)) {
-						continue;
-					}
+//					if (ebBudgetPersRateBaseMap
+//							.containsKey(budgetPersRateBaseKey)) {
+//						continue;
+//					}
 					ReportTypeVO reportTypeVO = getReportTypeVOForBudgetPersonnelRateAndBase(budgetPersRateAndBase);
 					reportTypeVO.setRateTypeDesc(getRateTypeDesc(
 							budgetPersRateAndBase.getRateClassCode(),
@@ -1795,10 +1799,10 @@ public abstract class BudgetBaseStream implements XmlStream {
 						&& budgetPersRateAndBase.getRateClass()
 								.getRateClassType().equals(rateClassType)) {
 					String budgetPersRateBaseKey = getBudgetPersRateAndBaseKey(budgetPersRateAndBase);
-					if (ohBudgetPersRateBaseMap
-							.containsKey(budgetPersRateBaseKey)) {
-						continue;
-					}
+//					if (ohBudgetPersRateBaseMap
+//							.containsKey(budgetPersRateBaseKey)) {
+//						continue;
+//					}
 					ReportTypeVO reportTypeVO = getReportTypeVOForBudgetPersonnelRateAndBase(budgetPersRateAndBase);
 					reportTypeVOList.add(reportTypeVO);
 					ohBudgetPersRateBaseMap.put(budgetPersRateBaseKey,
