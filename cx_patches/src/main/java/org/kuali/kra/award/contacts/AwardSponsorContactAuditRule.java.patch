diff --git a/src/main/java/org/kuali/kra/award/contacts/AwardSponsorContactAuditRule.java b/src/main/java/org/kuali/kra/award/contacts/AwardSponsorContactAuditRule.java
index 0838afe..a6d23f1 100644
--- a/coeus-impl/src/main/java/org/kuali/kra/award/contacts/AwardSponsorContactAuditRule.java
+++ b/coeus-impl/src/main/java/org/kuali/kra/award/contacts/AwardSponsorContactAuditRule.java
@@ -34,6 +34,7 @@ public class AwardSponsorContactAuditRule implements DocumentAuditRule {
 
     private static final String AWARD_SPONSOR_CONTACT_LIST_ERROR_KEY = "document.awardList[0].sponsorContact.auditErrors";
     private static final String ERROR_AWARD_NO_SPONSOR_CONTACTS = "error.awardSponsorContact.none";
+    private static final String ERROR_INVALID_COUNTRY_CODE = "error.invalid.countryCode";
     private static final String CONTACTS_AUDIT_ERRORS = "contactsAuditErrors";
     private List<AuditError> auditErrors;
 
@@ -57,6 +58,8 @@ public class AwardSponsorContactAuditRule implements DocumentAuditRule {
         
         valid &= checkForAtLeastOneSponsorContact(awardDocument.getAward().getSponsorContacts());
 
+        valid &= checkForValidCountryCode(awardDocument.getAward().getSponsorContacts());
+         
         reportAndCreateAuditCluster();
         
         return valid;
@@ -87,4 +90,27 @@ public class AwardSponsorContactAuditRule implements DocumentAuditRule {
             return true;
         }
     }
+
+
+    /**
+     * Verifies that the {@link AwardSponsorContact#getCountryCode} is not <code>null</code>. This results in a stacktrace
+     * when printing an award notice.
+     *
+     * @param sponsorContacts {@link List} of {@link AwardSponsorContact} instances to check countryCode on.
+     * @return true if all {@link AwardSponsorContact} instances have valid country codes, false otherwise.
+     */
+    protected boolean checkForValidCountryCode(final List<AwardSponsorContact> sponsorContacts) {
+        if (sponsorContacts.isEmpty()) {
+            return true;
+        }
+        
+        for (final AwardSponsorContact contact : sponsorContacts) {
+            if (contact.getRolodex() != null && contact.getRolodex().getCountryCode() == null) {
+                auditErrors.add(new AuditError(AWARD_SPONSOR_CONTACT_LIST_ERROR_KEY, ERROR_INVALID_COUNTRY_CODE,                    
+                                               Constants.MAPPING_AWARD_CONTACTS_PAGE + "." + Constants.CONTACTS_PANEL_ANCHOR));
+                return false; // it only takes one
+            }
+        }
+        return true;
+    }
 }
